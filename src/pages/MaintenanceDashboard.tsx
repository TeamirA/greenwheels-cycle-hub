import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { bikes, maintenanceReports, stations, users } from '@/data/mockData';
import { Bike, MapPin, Search, AlertCircle, Calendar, Clock, CheckCircle, Filter } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import StationMap from '@/components/StationMap';
import { MaintenanceReport } from '@/types';
import { CustomPagination } from '@/components/ui/custom-pagination';

interface MaintenanceDashboardProps {
  reportSource?: 'user' | 'staff';
}

// Interface for the bike location data
interface BikeLocationInfo {
  id: string;
  name: string;
  location: { latitude: number; longitude: number } | null;
}

const MaintenanceDashboard: React.FC<MaintenanceDashboardProps> = ({ reportSource }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [reports, setReports] = useState<MaintenanceReport[]>([]);
  const [filteredReports, setFilteredReports] = useState<MaintenanceReport[]>([]);
  const [selectedBikeId, setSelectedBikeId] = useState<string | null>(null);
  const [showMap, setShowMap] = useState(false);
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [priorityFilter, setPriorityFilter] = useState<string>('all');
  const [dateFilter, setDateFilter] = useState<string>('all');
  const { toast } = useToast();
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 6; // Show 6 reports per page

  useEffect(() => {
    // Filter reports based on the reportSource prop
    let initialReports = [...maintenanceReports];
    
    if (reportSource === 'staff') {
      // Staff reports are those generated by staff (role is staff or admin)
      initialReports = maintenanceReports.filter(report => {
        const reporter = users.find(user => user.id === report.reportedBy);
        return reporter?.role === 'staff' || reporter?.role === 'admin';
      });
    } else {
      // User reports are those generated by regular users
      initialReports = maintenanceReports.filter(report => {
        const reporter = users.find(user => user.id === report.reportedBy);
        return reporter?.role === 'user';
      });
    }
    
    setReports(initialReports);
    setFilteredReports(initialReports);
  }, [reportSource]);
  
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
    applyFilters(e.target.value, statusFilter, priorityFilter, dateFilter);
  };
  
  const applyFilters = (search: string, status: string, priority: string, date: string) => {
    let filtered = [...reports];
    
    // Apply search filter
    if (search) {
      filtered = filtered.filter(report =>
        report.description.toLowerCase().includes(search.toLowerCase()) ||
        report.bikeId.toLowerCase().includes(search.toLowerCase()) ||
        report.issue.toLowerCase().includes(search.toLowerCase())
      );
    }
    
    // Apply status filter
    if (status !== 'all') {
      filtered = filtered.filter(report => report.status === status);
    }
    
    // Apply priority filter
    if (priority !== 'all') {
      filtered = filtered.filter(report => report.priority === priority);
    }
    
    // Apply date filter
    if (date === 'today') {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      filtered = filtered.filter(report => new Date(report.reportedAt) >= today);
    } else if (date === 'week') {
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      filtered = filtered.filter(report => new Date(report.reportedAt) >= weekAgo);
    } else if (date === 'month') {
      const monthAgo = new Date();
      monthAgo.setMonth(monthAgo.getMonth() - 1);
      filtered = filtered.filter(report => new Date(report.reportedAt) >= monthAgo);
    }
    
    setFilteredReports(filtered);
  };
  
  const handleStatusFilterChange = (value: string) => {
    setStatusFilter(value);
    applyFilters(searchTerm, value, priorityFilter, dateFilter);
  };
  
  const handlePriorityFilterChange = (value: string) => {
    setPriorityFilter(value);
    applyFilters(searchTerm, statusFilter, value, dateFilter);
  };
  
  const handleDateFilterChange = (value: string) => {
    setDateFilter(value);
    applyFilters(searchTerm, statusFilter, priorityFilter, value);
  };
  
  const handleResolve = (reportId: string) => {
    // Update the status of the report to 'resolved'
    const updatedReports = reports.map(report =>
      report.id === reportId ? { ...report, status: 'resolved' as const, resolvedAt: new Date().toISOString() } : report
    );
    
    setReports(updatedReports);
    
    // Also update the filtered reports
    const updatedFilteredReports = filteredReports.map(report =>
      report.id === reportId ? { ...report, status: 'resolved' as const, resolvedAt: new Date().toISOString() } : report
    );
    setFilteredReports(updatedFilteredReports);
    
    // Find the bike associated with this report and update its status to 'available'
    const report = reports.find(r => r.id === reportId);
    if (report) {
      // In a real app, this would be an API call to update the bike status
      const bikeIndex = bikes.findIndex(b => b.id === report.bikeId);
      if (bikeIndex >= 0) {
        bikes[bikeIndex].status = 'available';
      }
    }
    
    // Show a toast notification
    toast({
      title: 'Issue Resolved',
      description: 'The maintenance issue has been marked as resolved and the bike is now available.',
    });
  };
  
  const handleEscalate = (reportId: string) => {
    // Update the priority of the report to 'high'
    const updatedReports = reports.map(report =>
      report.id === reportId ? { ...report, priority: 'high' as const } : report
    );
    
    setReports(updatedReports);
    
    // Also update the filtered reports
    const updatedFilteredReports = filteredReports.map(report =>
      report.id === reportId ? { ...report, priority: 'high' as const } : report
    );
    setFilteredReports(updatedFilteredReports);
    
    // Show a toast notification
    toast({
      title: 'Issue Escalated',
      description: 'The maintenance issue has been escalated to high priority.',
      variant: 'default',
    });
  };
  
  const handleDefer = (reportId: string) => {
    // Update the priority of the report to 'low'
    const updatedReports = reports.map(report =>
      report.id === reportId ? { ...report, priority: 'low' as const } : report
    );
    
    setReports(updatedReports);
    
    // Also update the filtered reports
    const updatedFilteredReports = filteredReports.map(report =>
      report.id === reportId ? { ...report, priority: 'low' as const } : report
    );
    setFilteredReports(updatedFilteredReports);
    
    // Show a toast notification
    toast({
      title: 'Issue Deferred',
      description: 'The maintenance issue has been deferred to low priority.',
    });
  };
  
  const handleBikeSelect = (bikeId: string) => {
    setSelectedBikeId(bikeId);
    setShowMap(true);
  };
  
  const bikeLocations: BikeLocationInfo[] = bikes.map(bike => {
    const station = stations.find(station => station.id === bike.stationId);
    return {
      id: bike.id,
      name: bike.model, // Using model as the name
      location: station ? { 
        latitude: station.coordinates.lat, 
        longitude: station.coordinates.lng 
      } : null,
    };
  }).filter(bike => bike.location !== null) as BikeLocationInfo[];

  // Calculate pagination
  const indexOfLastReport = currentPage * itemsPerPage;
  const indexOfFirstReport = indexOfLastReport - itemsPerPage;
  const currentReports = filteredReports.slice(indexOfFirstReport, indexOfLastReport);
  const totalPages = Math.ceil(filteredReports.length / itemsPerPage);

  // Reset to first page when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, statusFilter, priorityFilter, dateFilter]);
  
  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold bg-gradient-to-r from-greenprimary to-greenaccent text-transparent bg-clip-text dark:from-greenprimary dark:to-white">
            Maintenance Dashboard
          </h1>
          <p className="text-muted-foreground dark:text-gray-400">
            {reportSource === 'staff' 
              ? 'Staff-reported maintenance issues requiring attention'
              : 'User-reported maintenance issues requiring review'}
          </p>
        </div>
        
        <div className="flex gap-2 mt-4 md:mt-0">
          <Select value={dateFilter} onValueChange={handleDateFilterChange}>
            <SelectTrigger className="w-[120px]">
              <SelectValue placeholder="Date Filter" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Dates</SelectItem>
              <SelectItem value="today">Today</SelectItem>
              <SelectItem value="week">This Week</SelectItem>
              <SelectItem value="month">This Month</SelectItem>
            </SelectContent>
          </Select>
          
          <Button 
            variant="outline" 
            className="gap-1"
            onClick={() => {
              setSearchTerm('');
              setStatusFilter('all');
              setPriorityFilter('all');
              setDateFilter('all');
              setFilteredReports(reports);
            }}
          >
            <Filter size={16} />
            Reset
          </Button>
        </div>
      </div>
      
      <div className="bg-gray-50 rounded-lg p-4 shadow-sm border dark:bg-gray-800 dark:border-gray-700">
        <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
          <div className="flex items-center flex-1">
            <Search className="h-4 w-4 text-gray-500 dark:text-gray-400 mr-2" />
            <Input
              type="text"
              placeholder="Search by bike ID, issue, or description..."
              value={searchTerm}
              onChange={handleSearch}
              className="max-w-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            />
          </div>
          
          <div className="flex flex-wrap items-center gap-2">
            <Select value={statusFilter} onValueChange={handleStatusFilterChange}>
              <SelectTrigger className="w-[120px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="pending">Pending</SelectItem>
                <SelectItem value="in-progress">In Progress</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={priorityFilter} onValueChange={handlePriorityFilterChange}>
              <SelectTrigger className="w-[120px]">
                <SelectValue placeholder="Priority" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Priority</SelectItem>
                <SelectItem value="low">Low</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="high">High</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>
      
      <Tabs defaultValue="all-reports" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="all-reports">All Reports</TabsTrigger>
          <TabsTrigger value="pending-reports">Pending</TabsTrigger>
          <TabsTrigger value="resolved-reports">Resolved</TabsTrigger>
        </TabsList>
        
        <TabsContent value="all-reports" className="space-y-4 pt-4">
          {showMap && selectedBikeId && (
            <Card className="mb-6 overflow-hidden">
              <CardHeader className="bg-gray-50 dark:bg-gray-800 py-3">
                <CardTitle className="text-lg flex items-center">
                  <MapPin className="mr-2" size={18} /> 
                  Bike Location: {selectedBikeId}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                <div className="h-[400px]">
                  <StationMap 
                    stations={bikeLocations}
                    selectedStation={selectedBikeId} 
                    onStationSelect={(id) => console.log('Selected bike:', id)} 
                  />
                </div>
              </CardContent>
            </Card>
          )}
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {currentReports.length > 0 ? currentReports.map(report => (
              <Card key={report.id} className={`bg-white overflow-hidden transition-shadow hover:shadow-md
                ${report.priority === 'high' ? 'border-l-4 border-l-error' : 
                  report.priority === 'medium' ? 'border-l-4 border-l-amber-400' : 
                  'border-l-4 border-l-gray-300'}
                dark:bg-gray-800 dark:border-gray-700`}
              >
                <CardHeader className="bg-gray-50 dark:bg-gray-800 py-3">
                  <CardTitle className="flex items-center justify-between text-base">
                    <span className="flex items-center">
                      <Bike className="mr-2 text-gray-500" size={16} /> 
                      <span className="font-semibold">{report.bikeId}</span> 
                      <span className="mx-1">—</span> 
                      {report.issue}
                    </span>
                    <Badge variant={
                      report.status === 'resolved' ? 'outline' :
                      report.status === 'pending' ? 'secondary' : 'default'
                    }>
                      {report.status === 'pending' ? 'Pending' : 
                       report.status === 'in-progress' ? 'In Progress' : 'Resolved'}
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent className="pt-4">
                  <div className="flex items-start space-x-2 mb-3">
                    <AlertCircle className="h-4 w-4 text-gray-500 mt-0.5" />
                    <p className="text-sm text-gray-700 dark:text-gray-300">{report.description}</p>
                  </div>
                  
                  <div className="flex items-center space-x-2 mb-3">
                    <Clock className="h-4 w-4 text-gray-500" />
                    <div>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        Reported: {new Date(report.reportedAt).toLocaleDateString()} 
                        {report.resolvedAt && 
                          ` • Resolved: ${new Date(report.resolvedAt).toLocaleDateString()}`
                        }
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2 mb-3">
                    <Calendar className="h-4 w-4 text-gray-500" />
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      Reported by: {users.find(user => user.id === report.reportedBy)?.name || 'Unknown'}
                    </p>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <MapPin className="h-4 w-4 text-blue-500" />
                    <Button variant="link" onClick={() => handleBikeSelect(report.bikeId)} className="p-0 h-auto text-xs font-normal">
                      View Bike Location
                    </Button>
                  </div>
                  
                  {report.status !== 'resolved' && (
                    <div className="flex justify-end gap-2 mt-4">
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={() => handleDefer(report.id)}
                          className="text-xs"
                        >
                          Defer
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={() => handleEscalate(report.id)}
                          className="text-xs bg-amber-50 border-amber-200 hover:bg-amber-100 dark:bg-transparent dark:border-amber-500 dark:text-amber-400"
                        >
                          Escalate
                        </Button>
                        <Button 
                          size="sm" 
                          onClick={() => handleResolve(report.id)}
                          className="text-xs bg-greenprimary hover:bg-greenprimary/80"
                        >
                          <CheckCircle className="h-3 w-3 mr-1" /> Resolve
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            )) : (
              <div className="col-span-2 p-8 text-center bg-white rounded-lg shadow dark:bg-gray-800">
                <div className="flex flex-col items-center">
                  <AlertCircle className="h-12 w-12 text-gray-300 mb-2" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white">No Reports Found</h3>
                  <p className="text-gray-500 mt-1">No maintenance reports match your current filter criteria.</p>
                </div>
              </div>
            )}
          </div>
          
          {filteredReports.length > itemsPerPage && (
            <div className="mt-4">
              <CustomPagination
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={setCurrentPage}
                itemsPerPage={itemsPerPage}
                totalItems={filteredReports.length}
              />
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="pending-reports" className="space-y-4 pt-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {currentReports.filter(report => report.status !== 'resolved').length > 0 ? 
              currentReports.filter(report => report.status !== 'resolved').map(report => (
                <Card key={report.id} className={`bg-white overflow-hidden transition-shadow hover:shadow-md
                  ${report.priority === 'high' ? 'border-l-4 border-l-error' : 
                    report.priority === 'medium' ? 'border-l-4 border-l-amber-400' : 
                    'border-l-4 border-l-gray-300'}
                  dark:bg-gray-800 dark:border-gray-700`}
                >
                  <CardHeader className="bg-gray-50 dark:bg-gray-800 py-3">
                    <CardTitle className="flex items-center justify-between text-base">
                      <span className="flex items-center">
                        <Bike className="mr-2 text-gray-500" size={16} /> 
                        <span className="font-semibold">{report.bikeId}</span> 
                        <span className="mx-1">—</span> 
                        {report.issue}
                      </span>
                      <Badge variant={report.status === 'in-progress' ? 'default' : 'secondary'}>
                        {report.status === 'pending' ? 'Pending' : 'In Progress'}
                      </Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-4">
                    <div className="flex items-start space-x-2 mb-3">
                      <AlertCircle className="h-4 w-4 text-gray-500 mt-0.5" />
                      <p className="text-sm text-gray-700 dark:text-gray-300">{report.description}</p>
                    </div>
                    
                    <div className="flex items-center space-x-2 mb-3">
                      <Clock className="h-4 w-4 text-gray-500" />
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        Reported: {new Date(report.reportedAt).toLocaleDateString()}
                      </p>
                    </div>
                    
                    <div className="flex items-center space-x-2 mb-3">
                      <Calendar className="h-4 w-4 text-gray-500" />
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        Reported by: {users.find(user => user.id === report.reportedBy)?.name || 'Unknown'}
                      </p>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <MapPin className="h-4 w-4 text-blue-500" />
                      <Button variant="link" onClick={() => handleBikeSelect(report.bikeId)} className="p-0 h-auto text-xs font-normal">
                        View Bike Location
                      </Button>
                    </div>
                    
                    <div className="flex justify-end gap-2 mt-4">
                      <div className="flex gap-2">
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={() => handleDefer(report.id)}
                          className="text-xs"
                        >
                          Defer
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={() => handleEscalate(report.id)}
                          className="text-xs bg-amber-50 border-amber-200 hover:bg-amber-100 dark:bg-transparent dark:border-amber-500 dark:text-amber-400"
                        >
                          Escalate
                        </Button>
                        <Button 
                          size="sm" 
                          onClick={() => handleResolve(report.id)}
                          className="text-xs bg-greenprimary hover:bg-greenprimary/80"
                        >
                          <CheckCircle className="h-3 w-3 mr-1" /> Resolve
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )) : (
                <div className="col-span-2 p-8 text-center bg-white rounded-lg shadow dark:bg-gray-800">
                  <div className="flex flex-col items-center">
                    <CheckCircle className="h-12 w-12 text-green-300 mb-2" />
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white">No Pending Reports</h3>
                    <p className="text-gray-500 mt-1">All maintenance issues have been resolved.</p>
                  </div>
                </div>
              )}
          </div>
          
          {filteredReports.filter(report => report.status !== 'resolved').length > itemsPerPage && (
            <div className="mt-4">
              <CustomPagination
                currentPage={currentPage}
                totalPages={Math.ceil(filteredReports.filter(report => report.status !== 'resolved').length / itemsPerPage)}
                onPageChange={setCurrentPage}
                itemsPerPage={itemsPerPage}
                totalItems={filteredReports.filter(report => report.status !== 'resolved').length}
              />
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="resolved-reports" className="space-y-4 pt-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {currentReports.filter(report => report.status === 'resolved').length > 0 ? 
              currentReports.filter(report => report.status === 'resolved').map(report => (
                <Card key={report.id} className="bg-white overflow-hidden transition-shadow hover:shadow-md dark:bg-gray-800 dark:border-gray-700">
                  <CardHeader className="bg-gray-50 dark:bg-gray-800 py-3">
                    <CardTitle className="flex items-center justify-between text-base">
                      <span className="flex items-center">
                        <Bike className="mr-2 text-gray-500" size={16} /> 
                        <span className="font-semibold">{report.bikeId}</span> 
                        <span className="mx-1">—</span> 
                        {report.issue}
                      </span>
                      <Badge variant="outline">Resolved</Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-4">
                    <div className="flex items-start space-x-2 mb-3">
                      <AlertCircle className="h-4 w-4 text-gray-500 mt-0.5" />
                      <p className="text-sm text-gray-700 dark:text-gray-300">{report.description}</p>
                    </div>
                    
                    <div className="flex items-center space-x-2 mb-3">
                      <Clock className="h-4 w-4 text-gray-500" />
                      <div>
                        <p className="text-xs text-gray-500 dark:text-gray-400">
                          Reported: {new Date(report.reportedAt).toLocaleDateString()} 
                          {report.resolvedAt && 
                            ` • Resolved: ${new Date(report.resolvedAt).toLocaleDateString()}`
                          }
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2 mb-3">
                      <Calendar className="h-4 w-4 text-gray-500" />
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        Reported by: {users.find(user => user.id === report.reportedBy)?.name || 'Unknown'}
                      </p>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <MapPin className="h-4 w-4 text-blue-500" />
                      <Button variant="link" onClick={() => handleBikeSelect(report.bikeId)} className="p-0 h-auto text-xs font-normal">
                        View Bike Location
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              )) : (
                <div className="col-span-2 p-8 text-center bg-white rounded-lg shadow dark:bg-gray-800">
                  <div className="flex flex-col items-center">
                    <AlertCircle className="h-12 w-12 text-gray-300 mb-2" />
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white">No Resolved Reports</h3>
                    <p className="text-gray-500 mt-1">No maintenance issues have been resolved yet.</p>
                  </div>
                </div>
              )}
          </div>
          
          {filteredReports.filter(report => report.status === 'resolved').length > itemsPerPage && (
            <div className="mt-4">
              <CustomPagination
                currentPage={currentPage}
                totalPages={Math.ceil(filteredReports.filter(report => report.status === 'resolved').length / itemsPerPage)}
                onPageChange={setCurrentPage}
                itemsPerPage={itemsPerPage}
                totalItems={filteredReports.filter(report => report.status === 'resolved').length}
              />
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default MaintenanceDashboard;
